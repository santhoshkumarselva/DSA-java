function simplifyPath(path):
    // Initialize a stack to hold the valid directory names
    stack = []

    // Split the path by slashes
    components = path.split('/')

    // Iterate over each component in the split path
    for component in components:
        if component == '' or component == '.':
            // Ignore empty components and current directory
            continue
        elif component == '..':
            // Go up one directory level if possible
            if stack is not empty:
                stack.pop()
        else:
            // Add valid directory names to the stack
            stack.push(component)

    // Join the components in the stack with a single slash
    simplified_path = '/' + '/'.join(stack)

    return simplified_path

Given an absolute path for a Unix-style file system, which begins with a slash '/',
transform this path into its simplified canonical path.
In Unix-style file system context, a single period '.' signifies the current directory,
a double period ".." denotes moving up one directory level, and multiple slashes
such as "//" are interpreted as a single slash. In this problem, treat sequences of periods
not covered by the previous rules (like "...") as valid names for files or directories.
The simplified canonical path should adhere to the following rules:

It must start with a single slash '/'.
Directories within the path should be separated by only one slash '/'.
It should not end with a slash '/', unless it's the root directory.
It should exclude any single or double periods used to denote current or parent directories.
Return the new path.