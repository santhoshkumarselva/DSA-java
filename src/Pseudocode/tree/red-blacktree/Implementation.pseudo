structure Node:
    key // The value stored in the node
    left // Pointer to the left child
    right // Pointer to the right child
    parent // Pointer to the parent node
    color // Color of the node, either RED or BLACK

function insert(root, key):
    // Step 1: Standard BST insert
    if root is NULL:
        return createNode(key)

    if key < root.key:
        root.left = insert(root.left, key)
    else if key > root.key:
        root.right = insert(root.right, key)
    else:
        // Key already exists, do not insert again
        return root

    // Step 2: Fix any violations caused by the insertion
    root = balance(root)

    return root

function balance(node):
    // Case 1: New node is root
    if node.parent is NULL:
        node.color = BLACK
        return node

    // Case 2: Parent is black, no violation
    if node.parent.color == BLACK:
        return node

    // Case 3: Parent and Uncle are red
    if uncle(node) is not NULL and uncle(node).color == RED:
        node.parent.color = BLACK
        uncle(node).color = BLACK
        grandparent(node).color = RED
        return balance(grandparent(node))

    // Case 4: Parent is red but Uncle is black (or NULL), and node is an inside child
    if node == node.parent.right and node.parent == grandparent(node).left:
        rotateLeft(node.parent)
        node = node.left
    else if node == node.parent.left and node.parent == grandparent(node).right:
        rotateRight(node.parent)
        node = node.right

    // Case 5: Parent is red but Uncle is black (or NULL), and node is an outside child
    node.parent.color = BLACK
    grandparent(node).color = RED
    if node == node.parent.left:
        rotateRight(grandparent(node))
    else:
        rotateLeft(grandparent(node))

    return node

function rotateLeft(node):
    // Perform left rotation around node
    rightChild = node.right
    node.right = rightChild.left
    if rightChild.left is not NULL:
        rightChild.left.parent = node
    rightChild.parent = node.parent
    if node.parent is NULL:
        root = rightChild
    else if node == node.parent.left:
        node.parent.left = rightChild
    else:
        node.parent.right = rightChild
    rightChild.left = node
    node.parent = rightChild

function rotateRight(node):
    // Perform right rotation around node
    leftChild = node.left
    node.left = leftChild.right
    if leftChild.right is not NULL:
        leftChild.right.parent = node
    leftChild.parent = node.parent
    if node.parent is NULL:
        root = leftChild
    else if node == node.parent.right:
        node.parent.right = leftChild
    else:
        node.parent.left = leftChild
    leftChild.right = node
    node.parent = leftChild

function grandparent(node):
    // Get the grandparent of the node
    if node.parent is not NULL and node.parent.parent is not NULL:
        return node.parent.parent
    else:
        return NULL

function uncle(node):
    // Get the uncle of the node
    grand = grandparent(node)
    if grand is NULL:
        return NULL
    if node.parent == grand.left:
        return grand.right
    else:
        return grand.left

function search(root, key):
    // Base case: If the root is NULL or key matches the root key
    if root is NULL or root.key == key:
        return root

    // Key is greater than root's key, so search in the right subtree
    if key > root.key:
        return search(root.right, key)

    // Key is smaller than root's key, so search in the left subtree
    return search(root.left, key)

Time complexities:

Insertion: O(logn)
Search: O(logn)
Balancing: O(1)

Space complexity: O(1)
