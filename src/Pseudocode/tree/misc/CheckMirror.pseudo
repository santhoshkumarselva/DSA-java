function isMirror(root):
    // Base case: if the root is null, it's a mirror of itself
    if root is null:
        return true
    // Call the helper function to recursively check if the tree is a mirror of itself
    return isMirrorHelper(root.left, root.right)

function isMirrorHelper(leftSubtree, rightSubtree):
    // Base case: if both subtrees are null, they are mirrors of each other
    if leftSubtree is null and rightSubtree is null:
        return true
    // If one subtree is null while the other is not, or vice versa, they are not mirrors
    else if leftSubtree is null or rightSubtree is null:
        return false
    // If the data of corresponding nodes don't match, they are not mirrors
    else if leftSubtree.data â‰  rightSubtree.data:
        return false
    else:
        // Recursively check if the left subtree of the left child is a mirror of the right subtree of the right child,
        // and the right subtree of the left child is a mirror of the left subtree of the right child
        return isMirrorHelper(leftSubtree.left, rightSubtree.right) AND isMirrorHelper(leftSubtree.right, rightSubtree.left)

Given a binary tree, check whether it is a mirror of itself.