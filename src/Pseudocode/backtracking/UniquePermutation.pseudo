function List<String> findUniquePermutation(String s):
    result = new List<String>()
    charCount = new HashMap<Character, Integer>()

    // Count the occurrences of each character in the input string
    for each character c in s:
        charCount[c] += 1

    // Generate unique permutations recursively
    generatePermutations(charCount, "", length of s, result)

    return result

function void generatePermutations(Map<Character, Integer> charCount, String current, int remaining, List<String> result):
    // Base case: If no characters remaining to form permutations, add the current permutation to result
    if remaining is 0:
        result.add(current)
        return

    // Iterate through each character in charCount
    for each character c in charCount.keySet():
        count = charCount[c]
        // If the count of character c is greater than 0, it can be used in the permutation
        if count > 0:
            charCount[c] -= 1 // Decrement the count temporarily
            // Recursively generate permutations with the updated count
            generatePermutations(charCount, current + c, remaining - 1, result)
            charCount[c] += 1 // Restore the count after backtracking

Given a string S.
The task is to print all unique permutations of the given string that may contain
duplicates in lexicographically sorted order.

Time complexity: O(n!)
Space complexity: O(n) for the call stack + O(n!) for storing permutations, so O(n+n!) = O(n!)